{"ast":null,"code":"var _jsxFileName = \"/Users/monica/Desktop/Monica's Task/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { MusicUploadForm } from \"./components/MusicUploadForm\";\nimport { PlayAllButtons } from \"./components/PlayAllButtons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [songList, setSongList] = useState([{\n    songName: \"Halo\",\n    artistName: \"Blackbird Blackbird\",\n    trackNumber: 11,\n    file: \"/music/music1.mp3\"\n  }, {\n    songName: \"Blind\",\n    artistName: \"Blackbird Blackbird\",\n    trackNumber: 2,\n    file: \"/music/music2.mp3\"\n  }, {\n    songName: \"Twin Flames\",\n    artistName: \"Blackbird Blackbird\",\n    trackNumber: 1,\n    file: \"/music/music3.mp3\"\n  }, {\n    songName: \"Left to Hurt\",\n    artistName: \"Blackbird Blackbird\",\n    trackNumber: 4,\n    file: \"/music/music4.mp3\"\n  }, {\n    songName: \"Starlight\",\n    artistName: \"Blackbird Blackbird\",\n    trackNumber: 5,\n    file: \"/music/music5.mp3\"\n  }, {\n    songName: \"Modern Disbelief\",\n    artistName: \"Blackbird Blackbird\",\n    trackNumber: 6,\n    file: \"/music/music6.mp3\"\n  }]);\n  // const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  // const [sorted, setSorted] = useState<boolean>(true);\n  // const [inputValue, setInputValue] = useState<string>(\"\");\n  // const [currentSongIndex, setCurrentSongIndex] = useState(-1);\n  // const [currentSong, setCurrentSong] = useState<HTMLAudioElement | null>(null);\n  // const handleTogglePlay = (index: number) => {\n  //   const audioUrl = songList[index]?.file;\n  //   currentSong?.pause();\n  //   if (index == currentSongIndex) {\n  //     setCurrentSongIndex(-1);\n  //   } else if (audioUrl) {\n  //     const audio = new Audio(audioUrl);\n  //     audio.play();\n  //     setCurrentSong(audio);\n  //     setCurrentSongIndex(index);\n  //   }\n  // };\n  // const pushItem = (newSong: Song) => {\n  //   setSongList((prevSongLists: Song[]) => [...prevSongLists, newSong]);\n  // };\n  // const handlePlayAll = () => {\n  //   if (isPlaying) {\n  //     currentSong?.pause();\n  //     setCurrentSongIndex(-1);\n  //   } else {\n  //     handleTogglePlay(0);\n  //   }\n  //   setIsPlaying(!isPlaying);\n  // };\n\n  // useEffect(() => {\n  //   if (isPlaying) {\n  //     const timer = setInterval(() => {\n  //       console.log(currentSong?.currentTime, currentSong?.duration);\n  //       if (\n  //         currentSong &&\n  //         Number(currentSong?.currentTime) >= Number(currentSong?.duration)\n  //       ) {\n  //         if (currentSongIndex < songList.length - 1) {\n  //           handleTogglePlay(currentSongIndex + 1);\n  //         } else {\n  //           handlePlayAll();\n  //         }\n  //       }\n  //     }, 1000);\n  //     return () => clearInterval(timer);\n  //   }\n  // });\n  // const sortSongs = () => {\n  //   setSongList([\n  //     ...songList.sort((a, b) =>\n  //       sorted ? a.trackNumber - b.trackNumber : b.trackNumber - a.trackNumber\n  //     ),\n  //   ]);\n  //   setSorted(!sorted);\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(PlayAllButtons, {\n      songList: songList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MusicUploadForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0U113OexSQjvVu2GN8cR8G09xEM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","MusicUploadForm","PlayAllButtons","jsxDEV","_jsxDEV","App","_s","songList","setSongList","songName","artistName","trackNumber","file","style","display","flexDirection","flexWrap","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/monica/Desktop/Monica's Task/src/App.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { Song } from \"./types\";\nimport { MusicUploadForm } from \"./components/MusicUploadForm\";\nimport { PlayAllButtons } from \"./components/PlayAllButtons\";\n\nfunction App() {\n  const [songList, setSongList] = useState<Song[]>([\n    {\n      songName: \"Halo\",\n      artistName: \"Blackbird Blackbird\",\n      trackNumber: 11,\n      file: \"/music/music1.mp3\",\n    },\n    {\n      songName: \"Blind\",\n      artistName: \"Blackbird Blackbird\",\n      trackNumber: 2,\n      file: \"/music/music2.mp3\",\n    },\n    {\n      songName: \"Twin Flames\",\n      artistName: \"Blackbird Blackbird\",\n      trackNumber: 1,\n      file: \"/music/music3.mp3\",\n    },\n    {\n      songName: \"Left to Hurt\",\n      artistName: \"Blackbird Blackbird\",\n      trackNumber: 4,\n      file: \"/music/music4.mp3\",\n    },\n    {\n      songName: \"Starlight\",\n      artistName: \"Blackbird Blackbird\",\n      trackNumber: 5,\n      file: \"/music/music5.mp3\",\n    },\n    {\n      songName: \"Modern Disbelief\",\n      artistName: \"Blackbird Blackbird\",\n      trackNumber: 6,\n      file: \"/music/music6.mp3\",\n    },\n  ]);\n  // const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  // const [sorted, setSorted] = useState<boolean>(true);\n  // const [inputValue, setInputValue] = useState<string>(\"\");\n  // const [currentSongIndex, setCurrentSongIndex] = useState(-1);\n  // const [currentSong, setCurrentSong] = useState<HTMLAudioElement | null>(null);\n  // const handleTogglePlay = (index: number) => {\n  //   const audioUrl = songList[index]?.file;\n  //   currentSong?.pause();\n  //   if (index == currentSongIndex) {\n  //     setCurrentSongIndex(-1);\n  //   } else if (audioUrl) {\n  //     const audio = new Audio(audioUrl);\n  //     audio.play();\n  //     setCurrentSong(audio);\n  //     setCurrentSongIndex(index);\n  //   }\n  // };\n  // const pushItem = (newSong: Song) => {\n  //   setSongList((prevSongLists: Song[]) => [...prevSongLists, newSong]);\n  // };\n  // const handlePlayAll = () => {\n  //   if (isPlaying) {\n  //     currentSong?.pause();\n  //     setCurrentSongIndex(-1);\n  //   } else {\n  //     handleTogglePlay(0);\n  //   }\n  //   setIsPlaying(!isPlaying);\n  // };\n\n  // useEffect(() => {\n  //   if (isPlaying) {\n  //     const timer = setInterval(() => {\n  //       console.log(currentSong?.currentTime, currentSong?.duration);\n  //       if (\n  //         currentSong &&\n  //         Number(currentSong?.currentTime) >= Number(currentSong?.duration)\n  //       ) {\n  //         if (currentSongIndex < songList.length - 1) {\n  //           handleTogglePlay(currentSongIndex + 1);\n  //         } else {\n  //           handlePlayAll();\n  //         }\n  //       }\n  //     }, 1000);\n  //     return () => clearInterval(timer);\n  //   }\n  // });\n  // const sortSongs = () => {\n  //   setSongList([\n  //     ...songList.sort((a, b) =>\n  //       sorted ? a.trackNumber - b.trackNumber : b.trackNumber - a.trackNumber\n  //     ),\n  //   ]);\n  //   setSorted(!sorted);\n  // };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        flexWrap: \"wrap\",\n        alignItems: \"center\",\n      }}\n    >\n      <PlayAllButtons songList={songList} />\n\n      <MusicUploadForm />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAElB,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,cAAc,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAS,CAC/C;IACES,QAAQ,EAAE,MAAM;IAChBC,UAAU,EAAE,qBAAqB;IACjCC,WAAW,EAAE,EAAE;IACfC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,OAAO;IACjBC,UAAU,EAAE,qBAAqB;IACjCC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,aAAa;IACvBC,UAAU,EAAE,qBAAqB;IACjCC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,cAAc;IACxBC,UAAU,EAAE,qBAAqB;IACjCC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,WAAW;IACrBC,UAAU,EAAE,qBAAqB;IACjCC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,kBAAkB;IAC5BC,UAAU,EAAE,qBAAqB;IACjCC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAE;EACR,CAAC,CACF,CAAC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACER,OAAA;IACES,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE;IACd,CAAE;IAAAC,QAAA,gBAEFd,OAAA,CAACF,cAAc;MAACK,QAAQ,EAAEA;IAAS;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEtClB,OAAA,CAACH,eAAe;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAAChB,EAAA,CA7GQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AA+GZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}